---

- hosts: openstack
  tasks:
    - import_tasks: tasks/install-dependencies.yml

    # Add the identity stack to the cluster and configure it as the gateway
    - include_role:
        name: jasmin.cluster-infra
      vars:
        cluster_name: "{{ identity_stack_name }}"
        cluster_stack_update: false
        cluster_gw_group: "{{ identity_gw_group_name }}"

    # Provision the cluster infrastructure
    - import_tasks: tasks/infra/provision.yml
      vars:
        cluster_groups: "{{ beegfs_groups }}"
        cluster_tag: "{{ cluster_type.storage }}"

- hosts: cluster
  become: true
  tasks:
    - import_tasks: tasks/network/hosts.yml

- hosts: beegfs_servers
  become: true
  tasks:
    - import_tasks: tasks/network/firewall.yml
    - include: tasks/util/upgrade_os_packages.yml
    # Join the hosts to the FreeIPA realm
    - include_tasks: tasks/identity/freeipa/client.yml

# Set the permissions for the cluster in FreeIPA
- hosts: freeipa_servers
  become: true
  tasks:
    - include_tasks: tasks/identity/freeipa/cluster_permissions.yml
  vars:
    # We don't need a group to permit users access to these hosts
    create_users_group: false

- hosts: beegfs_servers
  become: true
  # The beegfs role has a weird behaviour where if you specify beegfs_meta_dev,
  # it will attempt to unmount it every time the playbook runs
  # So just format the disks here
  pre_tasks:
    - block:
        - name: Format metadata filesystem
          filesystem:
            dev: "{{ cluster_attached_volumes.0.device }}"
            fstype: xfs

        - name: Ensure metadata mountpoint exists
          file:
            path: "/data/beegfs/beegfs_meta"
            state: directory

        - name: Mount metadata filesystem
          mount:
            src: "{{ cluster_attached_volumes.0.device }}"
            path: "/data/beegfs/beegfs_meta"
            fstype: xfs
            state: mounted
      when: inventory_hostname in groups.beegfs_mds
  roles:
    # Note: The BeeGFS clients are likely to be drawn from across a multi-stack
    # platform deployment. This playbook assumes the existence of a meta-group,
    # beegfs_clients, which contains all clients in the cluster.
    - role: stackhpc.beegfs
      beegfs_enable:
        admon: false
        mgmt: "{{ inventory_hostname in groups.beegfs_mds }}"
        meta: "{{ inventory_hostname in groups.beegfs_mds }}"
        oss: "{{ inventory_hostname in groups.beegfs_oss }}"
        tuning: "{{ inventory_hostname in groups.beegfs_oss }}"
        client: false
      beegfs_state: present
      beegfs_rdma: false
      beegfs_interfaces: ["{{ ansible_default_ipv4.interface }}"]
      beegfs_mgmt_host: "{{ groups.beegfs_mds | first }}"
      beegfs_meta_path: "/data/beegfs/beegfs_meta"
      # This is a list of devices for BeeGFS to use
      beegfs_oss_devices: "{{ cluster_attached_volumes | map(attribute = 'device') | list }}"
      # Generate a list of port numbers for the devices, starting from 8003 and incremented by 100
      #   E.g. 8003, 8103, 8203, ...
      beegfs_oss_ports: "{{ range(8003, 8003 + (cluster_attached_volumes | count) * 100, 100) | list }}"
      # We need to end up with a list of dicts, each with a dev and port key
      beegfs_oss: >
        {{
          beegfs_oss_devices |
            json_query('[*].{key: `dev`, value: @}') |
            zip(beegfs_oss_ports | json_query('[*].{key: `port`, value: @}')) |
            map('items2dict') |
            list
        }}
