---
# This playbook uses the Ansible OpenStack modules to create a cluster
# using a number of baremetal compute node instances, and configure it
# for a SLURM partition
- hosts: openstack
  tasks:
    - import_tasks: tasks/install-dependencies.yml
    - import_tasks: tasks/infra/provision.yml
      vars:
        # These are the groups to use when no fixed IP is given
        cluster_groups: "{{ slurm_groups_no_ip }}"
        # This is the gateway group to use when a fixed IP is given
        cluster_gw_group_fixed_ip: "{{ slurm_gw_group_name }}"
        # These are the groups to use when a fixed IP is given
        cluster_groups_fixed_ip: "{{ slurm_groups_fixed_ip }}"
        # Tag to assign to  the cluster
        cluster_tag: "{{ cluster_type.slurm }}"
    - name: Add provisioned nodes to groups for their cluster roles
      add_host:
        name: "{{ item }}"
        groups:
          - slurm
          - nfs_clients                 # Make this conditional?
          - beegfs_clients              # Make this conditional?
          - gluster_clients             # Make this conditional?
      with_items: "{{ groups['cluster'] }}"
      when: cluster_state | default('present') | lower == 'present'

- hosts: openstack
  tasks:
    - name: Import configuration from storage stack
      import_tasks: tasks/storage_stack.yml
      when:
        - storage_name is defined
        - cluster_state | default('present') | lower == 'present'

- hosts: cluster
  become: true
  tasks:
    - import_tasks: tasks/cluster-hosts.yml 
    - import_tasks: tasks/cluster-firewalld.yml 

- hosts: cluster
  become: true  
  roles:
    - role: resmo.ntp

- import_playbook: playbooks/nfs.yml
  when:
    - hostvars.localhost.storage_type is defined
    - hostvars.localhost.storage_type == 'nfs'

- import_playbook: playbooks/gluster.yml
  when:
    - hostvars.localhost.storage_type is defined
    - hostvars.localhost.storage_type == 'gluster'

- hosts:
    - "login"
    - "compute"
  become: true
  pre_tasks:

    - name: Ensure user home dir root exists
      file:
        path: "{{ jasmin_homedir }}"
        state: directory
      run_once: true

  roles:
    # Run the user creation once to create the user home directories
    - role: singleplatform-eng.users
      users: "{{ jasmin_users }}"
      groups_to_create: "{{ jasmin_groups }}"
      run_once: true

    # Run the user creation again (without home dir) on all nodes
    - role: singleplatform-eng.users
      users: "{{ jasmin_users }}"
      groups_to_create: "{{ jasmin_groups }}"
      users_create_homedirs: false

        
- hosts:
    - "login"
    - "compute"
  become: true
  pre_tasks:

    - name: Ensure the OpenHPC package repo rpm is present
      yum:
        name: "https://github.com/openhpc/ohpc/releases/download/v1.3.GA/ohpc-release-1.3-1.el7.x86_64.rpm"
        state: present

    - name: Ensure latest python is present
      yum:
        name: python
        state: latest

  roles:
    - role: stackhpc.openhpc
      openhpc_enable:
        control: "{{ inventory_hostname in groups['login'] }}"
        batch: "{{ inventory_hostname in groups['compute'] }}"
        runtime: true
      openhpc_cluster_name: "{{ cluster_name }}"
      openhpc_packages: "{{ slurm_packages }}"
      openhpc_slurm_partitions: "{{ slurm_partitions }}"
      openhpc_slurm_control_host: "{{ groups['login'] | first }}"

# Add user creation tool `sladduser` to the login node for admin users
- hosts: "login"
  become: true
  tasks:
    - import_tasks: tasks/slurm/install-sladduser.yml

# Delete the gateway if required
- hosts: openstack
  tasks:
    - import_tasks: tasks/infra/cleanup-gateway.yml
      vars:
        cluster_tag: "{{ cluster_type.slurm }}"
        cluster_groups: "{{ slurm_groups_no_ip }}"
