---

- block:
    # If a fixed IP is given, get it's details
    - block:
        - name: Find cluster floating ip
          #os_network_find_fip:
          openstack.cloud.floating_ip_info:
            floating_network: "{{ cluster_floating_network }}"
            ip: "{{ cluster_fixed_ip }}"
          register: cluster_fip

        - name: Set cluster ip facts
          set_fact:
            cluster_fip_id: "{{ cluster_fip.id }}"
            cluster_fip_ip: "{{ cluster_fip.ip }}"
      when: cluster_fixed_ip is defined

    # If no fixed IP is given, that means we are using either:
    #   1. A pre-configured gateway, in which case there is nothing to do
    #   2. An ephemeral gateway, which we need to find an IP for
    - name: Find IP for ephemeral gateway
      block:
        - name: Query existing stack output
          os_stack_outputs:
            stack: "{{ cluster_name }}"
          ignore_errors: true

        - name: Extract ip of existing ephemeral gateway
          set_fact:
            cluster_existing_gw_ip: "{{ ((openstack_stack_outputs | json_query(query) | default([], true)) + [omit]) | first }}"
          vars:
            query: "node_groups[?name=='{{ deploy_gw_group_name }}'].nodes[0].ip"
          when: openstack_stack_outputs is defined

        - name: Find gateway floating ip
          os_network_find_fip:
            floating_network: "{{ cluster_floating_network }}"
            ip: "{{ cluster_existing_gw_ip | default(omit) }}"
          register: cluster_fip

        - name: Set cluster ip facts
          set_fact:
            cluster_fip_id: "{{ cluster_fip.id }}"
            cluster_fip_ip: "{{ cluster_fip.ip }}"
      when:
        - cluster_fixed_ip is not defined
        - cluster_gw_ssh_proxy_command is not defined

    # Only set the gateway group fact if there is not a pre-configured gateway
    - name: Configure cluster gateway group
      set_fact:
        cluster_gw_group: >-
          {%- if cluster_fixed_ip is defined and cluster_gw_group_fixed_ip is defined -%}
            {{ cluster_gw_group_fixed_ip }}
          {%- else -%}
            {{ deploy_gw_group_name }}
          {%- endif -%}
      when: cluster_gw_ssh_proxy_command is not defined

    # Configure the groups to use for the call to jasmin-cluster-infra
    #   1. If using the ephemeral gateway group, inject it
    #   2. If a fixed ip was given, use the fixed ip groups
    #   3. If a fixed ip was not given, use the regular groups
    - name: Configure infrastructure groups
      block:
        # Here, we use lookup to force the evaluation of the given cluster_groups
        # This avoids a recursive templating error when used as the value of cluster_groups below
        - set_fact:
            cluster_infra_groups: "{{ lookup('vars', 'cluster_groups') + [deploy_gw_group] }}"
          when:
            - cluster_gw_group is defined
            - cluster_gw_group == deploy_gw_group_name

        - set_fact:
            cluster_infra_groups: "{{ cluster_groups_fixed_ip }}"
          when: cluster_fixed_ip is defined

        - set_fact:
            cluster_infra_groups: "{{ lookup('vars', 'cluster_groups') }}"
          when: cluster_infra_groups is not defined
  when: cluster_state | default('present') | lower == 'present'

- name: Set cluster image fact
  set_fact:
    # Use an image named after the cluster
    cluster_image: "cluster-{{ cluster_name }}"

- name: Check if cluster image exists
  os_image_facts:
    image: "{{ cluster_image }}"

- name: Set cluster_image_exists fact
  set_fact:
    # We want to get a boolean out, so use a double-negation to convert
    # The Jinja bool filter does not do what we need
    cluster_image_exists: "{{ not (not (openstack_image | default(None))) }}"

- name: Create cluster image
  block:
    - name: Get available images
      openstack.cloud.image_info:

    - name: Find cluster base image
      set_fact:
        # to/from_json required - see https://github.com/ansible/ansible/issues/27299#issuecomment-331068246
        cluster_image_base: "{{ openstack_image | to_json | from_json | json_query(cluster_image_query) | first }}"
      vars:
        cluster_image_query: "[?starts_with(name, '{{ cluster_image_prefix }}')]"

    - name: Create volume from base image
      os_volume:
        display_name: "cluster-image-{{ cluster_name }}"
        image: "{{ cluster_image_base.name }}"
        # Convert from bytes to GiB, then moderate to the minimum size
        size: "{{ [cluster_image_volume_min_size, (cluster_image_base.size / 1024 / 1024 / 1024) | round(0, 'ceil') | int] | max }}"
      register: cluster_image_volume

    - name: Create cluster image from volume
      os_volume_upload_to_image:
        volume_id: "{{ cluster_image_volume.id }}"
        image_name: "{{ cluster_image }}"
        disk_format: "{{ cluster_image_base.disk_format }}"

    - name: Add cluster_image tag to image
      os_image:
        name: "{{ cluster_image }}"
        properties:
          "jasmin_cluster_image": "1"

    - name: Remove volume
      os_volume:
        display_name: "{{ cluster_image_volume.volume.display_name }}"
        state: absent
  when:
    - cluster_state | default('present') | lower == 'present'
    - not cluster_image_exists

# If cluster_state=absent, it doesn't matter that no groups are set
- name: Provision infrastructure
  include_role:
    name: jasmin.cluster-infra
  vars:
    cluster_groups: "{{ cluster_infra_groups | default([]) }}"

- name: Remove cluster image
  os_image:
    name: "cluster-{{ cluster_name }}"
    state: absent
  when: cluster_state | default('present') | lower != 'present'
