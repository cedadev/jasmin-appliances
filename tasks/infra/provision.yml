---

- name: Configure infrastructure
  block:
    # If no fixed IP is given, see if there is an existing one from an ephemeral deployment gateway
    - block:
        - name: Query existing stack for its output
          os_stack_outputs:
            stack: "{{ cluster_name }}"
          ignore_errors: true

        - name: Extract output of existing ephemeral bastion
          set_fact:
            cluster_existing_gw_ip: "{{ ((openstack_stack_outputs | json_query(query) | default([], true)) + [omit]) | first }}"
          vars:
            query: "node_groups[?name=='{{ deploy_gw_group_name }}'].nodes[0].ip"
          when: openstack_stack_outputs is defined
      when: cluster_fixed_ip is not defined

    - name: Find gateway floating IP
      os_network_find_fip:
        floating_network: "{{ cluster_floating_network }}"
        ip: "{{ cluster_fixed_ip | default(cluster_existing_gw_ip) | default(omit) }}"
      register: cluster_fip

    - name: Set gateway facts
      set_fact:
        cluster_gw_fip_id: "{{ cluster_fip.id }}"
        cluster_gw_fip_ip: "{{ cluster_fip.ip }}"
        cluster_gw_group: >-
          {%- if cluster_fixed_ip is defined and cluster_gw_group_fixed_ip is defined -%}
            {{ cluster_gw_group_fixed_ip }}
          {%- else -%}
            {{ deploy_gw_group_name }}
          {%- endif -%}

    - name: Set infrastructure groups for fixed IP
      set_fact:
        # Here, we use lookup to force the evaluation of the given cluster_groups
        # This avoids a recursive templating error when used as the value of cluster_groups below
        cluster_infra_groups: >-
          {%- if cluster_gw_group == deploy_gw_group_name -%}
            {{ lookup('vars', 'cluster_groups') + [deploy_gw_group] }}
          {%- else -%}
            {{ cluster_groups_fixed_ip }}
          {%- endif -%}
  when: cluster_state | default('present') | lower == 'present'

- name: Set cluster image fact
  set_fact:
    # Use an image named after the cluster
    cluster_image: "cluster-{{ cluster_name }}"

- name: Check if cluster image exists
  os_image_facts:
    image: "{{ cluster_image }}"

- name: Set cluster_image_exists fact
  set_fact:
    # We want to get a boolean out, so use a double-negation to convert
    # The Jinja bool filter does not do what we need
    cluster_image_exists: "{{ not (not (openstack_image | default(None))) }}"

- name: Create cluster image
  block:
    - name: Get cluster base image info
      os_image_facts:
        image: "{{ cluster_image_base }}"

    - name: Create volume from base image
      os_volume:
        display_name: "cluster-image-{{ cluster_name }}"
        image: "{{ cluster_image_base }}"
        # Convert from bytes to GiB
        size: "{{ (openstack_image.size / 1024 / 1024 / 1024) | round(0, 'ceil') | int }}"
      register: cluster_image_volume

    - name: Create cluster image from volume
      os_volume_upload_to_image:
        volume_id: "{{ cluster_image_volume.id }}"
        image_name: "{{ cluster_image }}"
        disk_format: "{{ openstack_image.disk_format }}"

    - name: Add cluster_image tag to image
      os_image:
        name: "{{ cluster_image }}"
        properties:
          "jasmin_cluster_image": "1"

    - name: Remove volume
      os_volume:
        display_name: "{{ cluster_image_volume.volume.display_name }}"
        state: absent
  when:
    - cluster_state | default('present') | lower == 'present'
    - not cluster_image_exists

# If cluster_state=absent, it doesn't matter that no groups are set
- name: Provision infrastructure
  include_role:
    name: jasmin.cluster-infra
  vars:
    cluster_groups: "{{ cluster_infra_groups | default([]) }}"

- name: Remove cluster image
  os_image:
    name: "cluster-{{ cluster_name }}"
    state: absent
  when: cluster_state | default('present') | lower != 'present'
