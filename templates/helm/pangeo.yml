{% set default_pangeo_domain = "pangeo." + (cluster_fixed_ip | replace('.', '-')) + ".sslip.io" %}
jupyterhub:
  # Authenticate using the FreeIPA LDAP database
  # We use LDAP because the LDAP authenticator supports controlling access by group membership
  # The oauthenticator doesn't understand OpenID Connect so can't use the groups claim
  
  hub:
    config:
      # change to auth with version 4.5.7
      Authenticator:
        admin_users: [admin]
        JupyterHub:
          admin_access: true
          authenticator_class: ldapauthenticator.LDAPAuthenticator
        LDAPAuthenticator:
          allowedGroups:
            - "cn=admins,cn=groups,cn=accounts,{{ freeipa_ldap_domain }}"
            - "cn={{ pangeo_notebook_users_group }},cn=groups,cn=accounts,{{ freeipa_ldap_domain }}"
          # Use the IP address as the DNS resolution isn't always reliable
          server_address: "{{ hostvars[groups.freeipa_servers | first].ansible_default_ipv4.address }}"
          bind_dn_template: "uid={username},cn=users,cn=accounts,{{ freeipa_ldap_domain }}"
        
    db:
      type: sqlite-pvc
      pvc:
        storageClassName: default
    services:
      dask-gateway:
        apiToken: "{{ ansible_local.pangeo_dask_gateway_api_token }}"
    # Disable hub networkpolicy support for now as it doesn't play nicely with dask-gateway
    # This is fixed on master but not in a release as of 04/01/2021
    # https://github.com/dask/helm-chart/issues/142
    networkPolicy:
      enabled: false
  singleuser:
    image:
      name: pangeo/pangeo-notebook
      tag: "2eef21d"
    startTimeout: 1000
    storage:
      type: dynamic
      capacity: "{{ pangeo_notebook_storage | default(10) }}Gi"
      dynamic:
        storageClass: standard
    cpu:
      limit: {{ pangeo_notebook_cpu | default(1) }}
      guarantee: {{ pangeo_notebook_cpu | default(1) }}
    memory:
      limit: "{{ pangeo_notebook_mem | default(2) }}G"
      guarantee: "{{ pangeo_notebook_mem | default(2) }}G"
    # Disable hub networkpolicy support for now as it doesn't play nicely with dask-gateway
    # This is fixed on master but not in a release as of 04/01/2021
    # https://github.com/dask/helm-chart/issues/142
    networkPolicy:
      enabled: false
  # Disable the userScheduler and userPlaceholder as they only make sense
  # on clusters which autoscale
  scheduling:
    userScheduler:
      enabled: false
    userPlaceholder:
      enabled: false
  proxy:
    service:
      type: ClusterIP
    secretToken: "{{ ansible_local.pangeo_secret_token }}"
    chp:
      # Disable hub networkpolicy support for now as it doesn't play nicely with dask-gateway
      # This is fixed on master but not in a release as of 04/01/2021
      # https://github.com/dask/helm-chart/issues/142
      networkPolicy:
        enabled: false
  ingress:
    enabled: true
    hosts: ["{{ pangeo_domain | default(default_pangeo_domain, true) }}"]
    # Get a certificate from the letsencrypt issuer
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      # Disable the maximum client body size for requests
      # https://github.com/jupyterlab/jupyterlab/issues/4214
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    tls:
      - hosts: ["{{ pangeo_domain | default(default_pangeo_domain, true) }}"]
        secretName: pangeo-tls

dask-gateway:
  gateway:
    auth:
      jupyterhub:
        apiToken: "{{ ansible_local.pangeo_dask_gateway_api_token }}"
    # Use the Pangeo image for Dask schedulers and workers
    backend:
      image:
        name: pangeo/pangeo-notebook
        tag: "2eef21d"
    extraConfig:
      # Note that the key name here doesn't matter. Values in the
      # `extraConfig` map are concatenated, sorted by key name.
      clusteroptions: |
        from dask_gateway_server.options import Options, Integer, Float, String

        def option_handler(options):
            return {
                "worker_cores": options.worker_cores,
                "worker_memory": "%fG" % options.worker_memory,
            }

        c.Backend.cluster_options = Options(
            Integer("worker_cores", 1, min = 1, max = 8, label = "Worker CPUs"),
            Float("worker_memory", 2, min = 1, max = 16, label="Worker Memory (GiB)"),
            handler = option_handler,
        )
